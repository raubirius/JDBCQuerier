
;; The configuration file (config.cfg) may contain following properties (you
;; may copy this whole comment to a plain config.cfg file and remove the
;; commenting semicolon character from those lines you want actually to use):

;; Modifies the default size of a page in rows. Allowed range: 10 – 200.
;; 
;config.pageRows=50


;; The server part:
;; 
;server.name=localhost
;server.protocol=jdbc:jtds:sqlserver
;server.port=1433
;server.database=***
;server.instance=***

;; This forms into the connection string. This is a sample of a connection
;; string that will be formed internally:
;; 
;; jdbc:jtds:sqlserver://server.name:port/database;instance=instanceString

;; Parameters are optional. If present, they are appended to the connection
;; string in the following form (without the quotes): “;name=value”
;; 
;parameter.sendStringParametersAsUnicode=false
;parameter.example=***
;; …
;; 
;; Null parameters (with no value and no equal sign present):
;; 
;	parameter.exampleNullParameter
;; 
;; and parameters with reserved names (name, protocol, and port) are ignored.
;; If “server.database” or “server.instance” is defined, such property will
;; be ignored, too. (However, not defining them as “server.database” or
;; “server.instance”, but rather as “parameter.database” or
;; “parameter.instance” allows you to change their order; if it should matter
;; for any reason. — In this case, the extra semicolon may (or may not) cause
;; problems. This could be fixed in the main code.)


;; The user part:
;; 
;user.name=***
;user.password=***
;user.domain=***

;; Properties are optional. If present, they are sent to the connection manager:
;; 
;property.ssl=true
;property.example=***
;; …
;; 
;; Empty properties and properties with reserved names (name, password, and
;; domain) are ignored.


;; Patterns may ease the writing of some often-used commands. The “regex”
;; must be a well-formed regular expression and the “replace” contains
;; “reformulation” of the intended command (possibly containing the
;; replacement strigs $0 … $n). Here are some pattern samples:
;; 
pattern.count=14

;show databases|schemas
pattern.regex[0]=^\\s*show\\s+(?:databases|schemas)like\\s+(.*?)\\s*;?\\s*$
pattern.replace[0]=select * from sys.databases where schema_name like $1;
pattern.regex[1]=^\\s*show\\s+(?:databases|schemas)(\\s+where\\s+.*?)?\\s*;?\\s*$
pattern.replace[1]=select * from sys.databases$1;

;show tables
pattern.regex[2]=^\\s*show\\s+tables\\s+(?:from|in)\\s+([^\\s]+?)\\s+like\\s+(.*?)\\s*;?\\s*$
pattern.replace[2]=select * from information_schema.tables where table_schema = '$1' and table_name like $2;
pattern.regex[3]=^\\s*show\\s+tables\\s+like\\s+(.*?)\\s*;?\\s*$
pattern.replace[3]=select * from information_schema.tables where table_name like $1;
pattern.regex[4]=^\\s*show\\s+tables\\s+(?:from|in)\\s+([^\\s]+?)\\s+where\\s+(.*?)\\s*;?\\s*$
pattern.replace[4]=select * from information_schema.tables where table_schema = '$1' and $2;
pattern.regex[5]=^\\s*show\\s+tables\\s+where\\s+(.*?)\\s*;?\\s*$
pattern.replace[5]=select * from information_schema.tables where $1;
pattern.regex[6]=^\\s*show\\s+tables\\s+(?:from|in)\\s+([^\\s]+?)\\s*;?\\s*$
pattern.replace[6]=select * from information_schema.tables where table_schema = '$1';
pattern.regex[7]=^\\s*show\\s+tables\\s*;?\\s*$
pattern.replace[7]=select * from information_schema.tables;

;show columns
pattern.regex[8]=^\\s*show\\s+columns\\s+(?:from|in)\\s+(.*?)\\s+(?:from|in)\\s+(.*?)\\s+like\\s+(.*?)\\s*;?\\s*$
pattern.replace[8]=select * from information_schema.columns where table_name = '$1' and table_schema = '$2' and column_name like $3;
pattern.regex[9]=^\\s*show\\s+columns\\s+(?:from|in)\\s+(.*?)\\s+(?:from|in)\\s+(.*?)\\s+where\\s+(.*?)\\s*;?\\s*$
pattern.replace[9]=select * from information_schema.columns where table_name = '$1' and table_schema = '$2' and column_name and $3;
pattern.regex[10]=^\\s*show\\s+columns\\s+(?:from|in)\\s+(.*?)\\s+(?:from|in)\\s+(.*?)\\s*;?\\s*$
pattern.replace[10]=select * from information_schema.columns where table_name = '$1' and table_schema = '$2';
pattern.regex[11]=^\\s*show\\s+columns\\s+(?:from|in)\\s+(.*?)\\s+like\\s+(.*?)\\s*;?\\s*$
pattern.replace[11]=select * from information_schema.columns where table_name = '$1' and column_name like $2;
pattern.regex[12]=^\\s*show\\s+columns\\s+(?:from|in)\\s+(.*?)\\s+where\\s+(.*?)\\s*;?\\s*$
pattern.replace[12]=select * from information_schema.columns where table_name = '$1' and column_name and $2;
pattern.regex[13]=^\\s*show\\s+columns\\s+(?:from|in)\\s+(.*?)\\s*;?\\s*$
pattern.replace[13]=select * from information_schema.columns where table_name = '$1';
